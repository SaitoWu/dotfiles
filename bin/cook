#!/usr/bin/ruby

require 'fileutils'
require 'open-uri'
require 'yaml'

node = ARGV[0] || "#{ENV['HOME']}/.cook"

unless File.exist? node
  abort "cook node.json"
end

FileUtils.mkdir_p root = "/tmp/chef-solo"
FileUtils.mkdir_p gemhome = "#{root}/ruby"

unless Dir["#{gemhome}/gems/*/bin/chef-solo"].any?
  warn "Installing chef"
  system "/usr/bin/gem install chef --no-rdoc --no-ri --install-dir #{gemhome}"
  abort "Fail installing chef" unless $?.success?
end

ENV['PATH']    = Dir["#{gemhome}/gems/*/bin"].join(':') + ":#{ENV['PATH']}"
ENV['RUBYLIB'] = Dir["#{gemhome}/gems/*/{ext,lib}"].join(':') + ":#{ENV['RUBYLIB']}"

File.open(json_attribs = "#{root}/node.json", 'w') do |f|
  open(node) { |r| f.write(r.read) }
end

cookbooks = YAML.load(open(json_attribs))['cookbooks']
cookbook_path = cookbooks.to_enum(:each_with_index).map do |path, index|
  target = "#{root}/cookbooks-#{index}"

  FileUtils.rm_rf target
  FileUtils.mkdir_p target

  if File.exist? path
    system 'cp', '-R', "#{path}/", target
  else
    warn "Downloading #{path}"
    system "curl -sL #{path.inspect} | tar -xz -C #{target} -m --strip 1"
  end
  exit 1 unless $?.success?

  target
end


CONFIG = <<-RUBY
log_level        :#{$DEBUG ? 'debug' : 'info'}
verbose_logging   nil
json_attribs     #{json_attribs.inspect}
cookbook_path    #{cookbook_path.inspect}
file_cache_path  "#{root}"
file_backup_path "#{root}/backup"
sandbox_path     "#{root}/sandboxes"
cache_options    :path => "#{root}/cache/checksums", :skip_expires => true
RUBY

File.open(config = "#{root}/solo.rb", 'w') { |f| f.write CONFIG }

exec '/usr/bin/ruby', '-S', 'chef-solo', '-c', config
